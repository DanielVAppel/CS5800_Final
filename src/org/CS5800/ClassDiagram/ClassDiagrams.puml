@startuml

' Diagram: Class Diagram for User Management and Friend Requests

class User {
    - userID: String
    - name: String
    - email: String
    - passwordHash: String
    - location: GeoPoint
    + authenticate(): boolean
    + updateLocation(location: GeoPoint): void
    + sendFriendRequest(friendID: String): void
    + acceptFriendRequest(requestID: String): void
    + getFriends(): List<User>
}

class FriendRequest {
    - requestID: String
    - senderID: String
    - recipientID: String
    - status: RequestStatus
    + approve(): void
    + reject(): void
}

enum RequestStatus {
    PENDING
    ACCEPTED
    REJECTED
}

class FirebaseAuthService {
    + login(email: String, password: String): boolean
    + register(user: User): boolean
    + logout(): void
}

class FirebaseDatabaseService {
    + saveUser(user: User): void
    + getUser(userID: String): User
    + saveFriendRequest(request: FriendRequest): void
    + updateFriendRequestStatus(requestID: String, status: RequestStatus): void
    + getFriends(userID: String): List<User>
}

class MidpointCalculator {
    + calculateMidpoint(location1: GeoPoint, location2: GeoPoint): GeoPoint
}

class PlaceInformation {
    - placeID: String
    - name: String
    - location: GeoPoint
    + fetchDetails(): PlaceInformationDetails
}

class PlacesAPI {
    + fetchNearbyPlaces(location: GeoPoint, radius: double): List<PlaceInformation>
}

class App {
    + login(email: String, password: String): void
    + register(user: User): void
    + searchPlaces(midpoint: GeoPoint, radius: double): List<PlaceInformation>
    + sendFriendRequest(userID: String, friendID: String): void
}

User --|> FirebaseAuthService
User *-- FriendRequest
FirebaseDatabaseService o-- User
FirebaseDatabaseService o-- FriendRequest
FriendRequest --> RequestStatus
App --> User
App o-- MidpointCalculator
App --> PlacesAPI
App --> FirebaseAuthService
FirebaseDatabaseService --|> User
PlacesAPI --|> PlaceInformation

@enduml

@startuml

' Diagram: Class Diagram for PlaceInformation Search and Midpoint Calculation

class SearchPreferences {
    - radius: double
    - filters: List<String>
    + updateRadius(newRadius: double): void
    + addFilter(filter: String): void
    + removeFilter(filter: String): void
}

class PlaceInformationObserver {
    + update(placeList: List<PlaceInformation>): void
}

class SearchManager {
    - observers: List<PlaceInformationObserver>
    - currentSearchPreferences: SearchPreferences
    + addObserver(observer: PlaceInformationObserver): void
    + removeObserver(observer: PlaceInformationObserver): void
    + notifyObservers(): void
    + executeSearch(location: GeoPoint): List<PlaceInformation>
}

class SearchResults {
    - places: List<PlaceInformation>
    + displayResults(): void
}

class GeoPoint {
    - latitude: double
    - longitude: double
    + getCoordinates(): String
}

SearchPreferences *-- SearchManager
SearchManager o-- PlaceInformationObserver
SearchManager --> SearchResults
SearchResults --> PlaceInformation
PlaceInformation --> GeoPoint

@enduml
